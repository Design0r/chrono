package templates

import (
	"chrono/calendar"
	"chrono/db/repo"
	"chrono/schemas"
	"fmt"
	"strconv"
	"time"
)

templ Calendar(user repo.User, month schemas.Month, vacRemaining float64, vacUsed float64, pendingEvents int, notifications []repo.Notification, users []repo.User) {
	@Index(&user, notifications) {
		<div class="pt-2">
			<div class="grid grid-cols-7">
				@Info(month, user, vacRemaining, vacUsed, pendingEvents, users)
			</div>
			@CalendarCore(month, user)
		</div>
		<div class="h-16"></div>
	}
}

templ WeekdayHeader(name string, month schemas.Month) {
	{{
		currWeekday := time.Now().Weekday()
		strWeekday := calendar.GetStrWeekday(currWeekday)
		now := time.Now()
	}}
	if strWeekday == name && int(now.Month()) == month.Number && now.Year() == month.Year {
		<div class="bg-base-200 text-base-content border-t-2 border-success rounded-xl p-2 text-center text-lg">{ name }</div>
	} else {
		<div class="bg-base-200 rounded-xl border-accent-content p-2 text-center text-lg">{ name }</div>
	}
}

templ Day(year int, month int, day schemas.Day, user repo.User) {
	{{
	url := fmt.Sprintf("/%d/%d/%d", year, month, day.Number)
	strDay := strconv.Itoa(day.Number)
	now := time.Now()
	currDay := now.Day()
	dayId := fmt.Sprintf("day-%v", strDay)
	dayTarget := fmt.Sprintf("#%v", dayId)

	css := "bg-neutral rounded-xl border-accent-content flex flex-col"
	if currDay == day.Number && int(now.Month()) == month && now.Year() == year {
		css = "bg-neutral border-t-2 border-success text-base-content rounded-xl flex flex-col"
	}
	}}
	<div class={ css }>
		<div class="pt-2 pb-2 pl-2 text-lg">
			{ strDay }
		</div>
		<div
			class="card-body p-2 h-full bg-base-200 rounded-t-none rounded-b-xl"
		>
			<div
				class="card-body px-0 pb-2 pt-0 h-full bg-base-200 rounded-xl"
				id={ dayId }
			>
				for _, event := range day.Events {
					@Event(event, user)
				}
			</div>
			<button
				hx-post={ url }
				hx-vals="js:{name: getEventName()}"
				hx-target={ dayTarget }
				hx-swap="beforeend"
				class="btn btn-sm bg-base-300 rounded-xl text-base-content opacity-10 hover:text-base-content hover:opacity-100 w-full hover:icon-filled"
			>
				<span class="icon-outlined hover:icon-filled text-2xl leading-5">add</span>
			</button>
		</div>
	</div>
}

templ Info(month schemas.Month, user repo.User, vacRemaining float64, vacUsed float64, pendingEvents int, users []repo.User) {
	{{
	strYear := strconv.Itoa(month.Year)
	year := month.Year
	nextYear := year
	prevMNum := month.Number - 1
	nextMNum := month.Number + 1
	if prevMNum <= 0 {
		prevMNum = 12
		year--
	}
	if nextMNum > 12 {
		nextMNum = nextMNum % 12
		nextYear++
		if nextMNum == 0 {
			nextMNum = 1
		}
	}
	prevStrMonth := strconv.Itoa(prevMNum)
	nextStrMonth := strconv.Itoa(nextMNum)

	urlPrevMonth := fmt.Sprintf("/%v/%v", year, prevStrMonth)
	urlNextMonth := fmt.Sprintf("/%v/%v", nextYear, nextStrMonth)
	}}
	<div class="col-span-7 grid grid-cols-7 items-center gap-x-2 mt-2 mb-10">
		<select class="col-span-1 select focus:border-0 h-full border-base-300 border-2 bg-base-300 hover:bg-base-300 transition-color max-w-xs text-lg rounded-xl" name="eventName" id="eventName">
			<option value="urlaub">Urlaub</option>
			<option value="urlaub halbtags">Urlaub Halbtags</option>
			<option value="workation">Workation</option>
			<option value="krank">Krank</option>
			<option value="home office">Home Office</option>
		</select>
		<div class="flex justify-start col-span-2 space-x-2 bg-base-300 p-3 rounded-xl gap-4">
			<div class="flex items-center justify-center gap-3">
				<div class="w-7 h-7 flex justify-center items-center rounded-full bg-base-100 hover:bg-base-300 transition-colors">
					<button type="button" hx-swap="outerHTML" hx-target="#calendar" hx-get={ urlPrevMonth } class="btn text-lg icon-outlined">arrow_back</button>
				</div>
				<div class="w-7 h-7 flex justify-center items-center rounded-full bg-base-100 hover:bg-base-300 transition-colors">
					<button type="button" hx-swap="outerHTML" hx-target="#calendar" hx-get={ urlNextMonth } class="btn text-lg icon-outlined">arrow_forward</button>
				</div>
				<div class="pl-4 text-lg">{ month.Name } { strYear }</div>
			</div>
		</div>
		<div class="col-span-4 h-full text-lg">
			<div class="h-full items-center rounded-xl bg-base-300">
				<div class="grid grid-cols-4 w-full h-full gap-2">
					<div class="col-span-1 w-full justify-center ">
						@UserFilter(users, month)
					</div>
					<div class="col-span-1 w-full justify-center ">
						@EventFilter(month)
					</div>
					<div class="flex col-span-2 w-full items-center align-middle h-full ">
						@VacationCounter(user, vacRemaining, vacUsed, pendingEvents)
					</div>
				</div>
			</div>
		</div>
	</div>
	<script>
		function getEventName(){
			return document.getElementById("eventName").value
		}
	</script>
}

templ VacationCounter(user repo.User, vacationRemaining float64, vacUsed float64, pendingEvents int) {
	{{ strNum := strconv.Itoa(int(user.VacationDays)) }}
	<div id="vacation-counter" hx-swap-oob="true" class="flex w-full justify-center items-center align-middle h-full text-center">
		<div class="text-info">{ fmt.Sprint(pendingEvents) } </div><span class="text-base-content pl-2">pending</span><span class="text-base-content opacity-50 px-3">|</span>
		<div class="text-warning">{ fmt.Sprint(vacUsed) } </div> <span class="text-base-content pl-2">used</span><span class="text-base-content opacity-50 px-3">|</span>
		<div class="text-success">{ fmt.Sprint(vacationRemaining) } </div> <span class="text-base-content pl-2">remaining</span>
		<div class="text-info hidden">{ strNum } total</div>
	</div>
}

templ UserFilter(users []repo.User, month schemas.Month) {
	<select
		hx-get={ fmt.Sprintf("/%v/%v", month.Year, month.Number) }
		hx-target="#calendar"
		hx-swap="outerHTML"
		class="col-span-1  select min-w-44 h-full focus:border-0 border-0 bg-base-300 hover:bg-base-300 transition-color w-full text-lg rounded-xl"
		name="filter"
		id="filter"
		hx-push-url="true"
		hx-include="#event-filter"
	>
		<option value="all">All Users</option>
		for _, user := range users {
			<option value={ user.Username }>{ user.Username }</option>
		}
	</select>
}

templ EventFilter(month schemas.Month) {
	<select
		hx-get={ fmt.Sprintf("/%v/%v", month.Year, month.Number) }
		hx-target="#calendar"
		hx-swap="outerHTML"
		class="col-span-1 select min-w-44 h-full focus:border-0 border-0 bg-base-300 hover:bg-base-300 transition-color w-full text-lg rounded-xl"
		name="event-filter"
		id="event-filter"
		hx-push-url="true"
		hx-include="#filter"
	>
		<option value="all">All Events</option>
		<option value="urlaub">Urlaub</option>
		<option value="workation">Workation</option>
		<option value="krank">Krank</option>
		<option value="home office">Home Office</option>
	</select>
}
