package templates

import (
	"chrono/calendar"
	"chrono/db/repo"
	"chrono/schemas"
	"fmt"
	"strconv"
	"time"
)

templ Calendar(user repo.User, month schemas.Month, vacationUsed int, pendingEvents int, notifications []repo.Notification) {
	@Index(&user, notifications) {
		<div class="p-2 ">
			<div class="">
				<div class="grid grid-cols-7 gap-1">
					@Info(month, user, vacationUsed, pendingEvents)
					@WeekdayHeader("Monday", month)
					@WeekdayHeader("Tuesday", month)
					@WeekdayHeader("Wednesday", month)
					@WeekdayHeader("Thursday", month)
					@WeekdayHeader("Friday", month)
					@WeekdayHeader("Saturday", month)
					@WeekdayHeader("Sunday", month)
					for range month.Offset {
						<div></div>
					}
					for _, day := range month.Days {
						@Day(month.Year, month.Number, day, user)
					}
				</div>
			</div>
		</div>
	}
}

templ WeekdayHeader(name string, month schemas.Month) {
	{{
		currWeekday := time.Now().Weekday()
		strWeekday := calendar.GetStrWeekday(currWeekday)
		now := time.Now()
	}}
	if strWeekday == name && int(now.Month()) == month.Number && now.Year() == month.Year {
		<div class="bg-red-500 rounded border border-accent-content p-2 text-center text-lg">{ name }</div>
	} else {
		<div class="bg-base-300 rounded border border-accent-content p-2 text-center text-lg">{ name }</div>
	}
}

templ Day(year int, month int, day schemas.Day, user repo.User) {
	{{
	url := fmt.Sprintf("/%d/%d/%d", year, month, day.Number)
	strDay := strconv.Itoa(day.Number)
	now := time.Now()
	currDay := now.Day()
	dayId := fmt.Sprintf("day-%v", strDay)
	dayTarget := fmt.Sprintf("#%v", dayId)

	baseCss := "rounded border-accent-content border flex flex-col shadow-sm shadow-gray-900"
	}}
	<div
		if currDay == day.Number && int(now.Month()) == month && now.Year() == year {
			class={ fmt.Sprintf("%v %v", "bg-red-500", baseCss) }
		} else {
			if day.Name == "Saturday" || day.Name == "Sunday" {
				class="bg-base-200 rounded border-accent-content border flex flex-col shadow-sm shadow-gray-900"
			} else {
				class="bg-base-300 rounded border-accent-content border flex flex-col shadow-sm shadow-gray-900"
			}
		}
	>
		<div class="p-1 pl-2 text-xl">
			{ strDay }
		</div>
		<div
			class="card-body p-2 h-full bg-neutral rounded-b"
		>
			<div
				class="card-body px-0 pb-2 pt-0 h-full bg-neutral rounded-b"
				id={ dayId }
			>
				for _, event := range day.Events {
					@Event(event, user)
				}
			</div>
			<button
				hx-post={ url }
				hx-vals="js:{name: getEventName()}"
				hx-target={ dayTarget }
				hx-swap="beforeend"
				class="btn hover:border-base-content btn-sm bg-neutral rounded hover:text-base-content text-base-100 hover:border-2 border-2 border-base-100 border-dottedicon-outlined w-full hover:icon-filled"
			><span class="icon-outlined hover:icon-filled text-2xl leading-5">add_circle</span></button>
		</div>
	</div>
}

templ Info(month schemas.Month, user repo.User, vacationUsed int, pendingEvents int) {
	{{
	strYear := strconv.Itoa(month.Year)
	year := month.Year
	nextYear := year
	prevMNum := month.Number - 1
	nextMNum := month.Number + 1
	if prevMNum <= 0 {
		prevMNum = 12
		year--
	}
	if nextMNum > 12 {
		nextMNum = nextMNum % 12
		nextYear++
		if nextMNum == 0 {
			nextMNum = 1
		}
	}
	prevStrMonth := strconv.Itoa(prevMNum)
	nextStrMonth := strconv.Itoa(nextMNum)

	urlPrevMonth := fmt.Sprintf("/%v/%v", year, prevStrMonth)
	urlNextMonth := fmt.Sprintf("/%v/%v", nextYear, nextStrMonth)
	}}
	<div class="col-span-7 grid grid-cols-7 items-center ">
		<div class="flex justify-between col-span-3 space-x-5 bg-base-200 p-3 gap-4">
			<div class="flex items-center justify-start gap-2">
				<div class="w-8 h-8 flex justify-center items-center rounded-full bg-base-100">
					<a href={ templ.URL(urlPrevMonth) } class="text-xl icon-outlined">arrow_back</a>
				</div>
				<div class="w-8 h-8 flex justify-center items-center rounded-full bg-base-100">
					<a href={ templ.URL(urlNextMonth) } class="text-xl icon-outlined">arrow_forward</a>
				</div>
				<div class="pl-4 text-xl">{ month.Name } { strYear }</div>
			</div>
		</div>
		<select class="col-span-1 select select-bordered h-2 rounded bg-base-200 max-w-xs text-lg" name="eventName" id="eventName">
			<option value="urlaub">Urlaub</option>
			<option value="workation">Workation</option>
			<option value="krank">Krank</option>
			<option value="home office">Home Office</option>
		</select>
		@VacationCounter(user, vacationUsed, pendingEvents)
	</div>
	<script>
		function getEventName(){
			return document.getElementById("eventName").value
		}
	</script>
}

templ VacationCounter(user repo.User, vacationUsed int, pendingEvents int) {
	{{ strNum := strconv.Itoa(int(user.VacationDays)) }}
	<div id="vacation-counter" hx-swap-oob="true" class="col-span-3 text-lg">
		<div class="flex justify-center items-center space-x-2 p-3 bg-base-200">
			<h2>Vacation</h2>
			<div class="text-info">Overall { strNum }</div>
			<div class="text-warning">Used { strconv.Itoa(vacationUsed) }</div>
			<div class="text-success">Remaining { fmt.Sprintf("%v", int(user.VacationDays) - vacationUsed) }</div>
			<div class="text-base-content">Pending { fmt.Sprint(pendingEvents) }</div>
		</div>
	</div>
}
