package templates

import (
	"chrono/db/repo"
	"chrono/service"
	"fmt"
	"strconv"
	"strings"
	"time"
)

templ Index(user *repo.User, notifications []repo.Notification) {
	@Static() {
		@Header(user, notifications)
		<div class="container h-full justify-center mx-auto ">
			{ children... }
		</div>
		<div id="message-banner" class="fixed left-3 bottom-3 space-y-2"></div>
		<script>
        function removeMessageBanners() {
          const banner = document.getElementById("message-banner");
          const elements = banner.childNodes;
          elements.forEach((e) => {
            setTimeout(() => {
              e.remove();
            }, 3000);
          });
        }

        document.addEventListener("DOMContentLoaded", removeMessageBanners);
        document.addEventListener("htmx:afterOnLoad", removeMessageBanners);
      </script>
	}
}

templ Static() {
	<!DOCTYPE html>
	<html data-theme="dim" lang="en">
		<head>
			<meta charset="UTF-8"/>
			<link rel="stylesheet" href="/static/css/output.css"/>
			<link rel="icon" href="/static/favicon.ico" sizes="any"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<script src="/static/js/htmx-min.js"></script>
			<title>Chrono</title>
		</head>
		<body class="h-screen flex flex-col">
			{ children... }
		</body>
	</html>
}

templ Notifications(notifications []repo.Notification) {
	<div class="indicator">
		@NotificationIndicator(len(notifications))
		<div class="dropdown dropdown-end">
			<div
				tabindex="0"
				hx-get="/notifications"
				hx-swap="outerHTML"
				hx-target="#notification-container"
				role="button"
				class="btn btn-ghost text-xl icon-outlined"
			>notifications</div>
			@NotificationContainer([]repo.Notification{})
		</div>
	</div>
}

templ Header(user *repo.User, notifications []repo.Notification) {
	{{
	now := time.Now()
	month := strconv.Itoa(int(now.Month()))
	year := strconv.Itoa(now.Year())
	url := fmt.Sprintf("/%v/%v", year, month)
	}}
	<div class="px-4 pt-4 pb-0">
		<div class="navbar flex justify-between rounded-xl bg-base-100 ">
			<div class="flex gap-4">
				<a href="/" class="btn btn-ghost text-xl text-white"><img class="w-28" alt="" src="/static/chrono.svg"/></a>
				if user != nil {
					<a href={ templ.URL(url) } class="btn btn-ghost font-medium text-[15px]">Calendar<span class="icon-outlined">calendar_today</span></a>
					<a href="/team" class="btn btn-ghost font-medium text-[15px]">Team<span class="icon-outlined">group</span></a>
					if (*user).IsSuperuser {
						<a href="/requests" class="btn btn-ghost font-medium text-[15px]">Request<span class="icon-outlined">mark_chat_unread</span></a>
						<a href="/tokens" class="btn btn-ghost font-medium text-[15px]">Tokens<span class="icon-outlined">local_activity</span></a>
					}
				}
			</div>
			<div class="justify-end space-x-6">
				if user != nil {
					@Notifications(notifications)
					@Avatar(*user)
				} else {
					<a href="/login" class="btn btn-ghost">Login</a>
					<a href="/signup" class="btn btn-ghost">Signup</a>
				}
			</div>
		</div>
	</div>
}

templ Avatar(user repo.User) {
	{{
			bgColor := service.HSLToString(service.HexToHSL(user.Color))
	}}
	<div class="dropdown dropdown-end pr-2 items-center align-center justify-center">
		<div
			tabindex="0"
			role="button"
			class="avatar placeholder"
		>
			<div
				{ templ.Attributes{"style":fmt.Sprintf("background-color: %v;", bgColor)}... }
				class="text-neutral-content w-10 rounded-full"
			>
				<span class="text-xl">
					{ strings.Title(user.Username[:1]) }
				</span>
			</div>
		</div>
	</div>
}
