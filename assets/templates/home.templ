package templates

import (
	"chrono/internal/domain"
	"fmt"
	"time"
)

templ Home(user domain.UserWithVacation, progress domain.YearProgress, notifications []domain.Notification, eventHistogram []domain.YearHistogram) {
	@Index(&user.User, notifications) {
		<div class="flex flex-col container mx-auto justify-center align-middle gap-6 p-4">
			<div class="text-[48px] pl-2 text-primary font-light mb-2"><span class="animate-pulse font-medium text-white pr-1">> Hej </span>{ fmt.Sprintf("%v ", user.Username) }</div>
			@Card("Your vacation stats") {
				<div class="stats bg-base-100 max-lg:stats-vertical grid grid-cols-2 grid-rows-2 lg:grid-rows-1 lg:grid-cols-4 w-full">
					<div class="stat">
						<div class="stat-figure"></div>
						<div class="stat-title truncate text-accent/75 text-base ">Vacation remaining</div>
						<div class="-mb-1 pt-1.5 stat-value max-sm:text-2xl text-primary">{ fmt.Sprintf("%v ", user.VacationRemaining) }d</div>
						<div class="stat-desc text-accent/30">{ fmt.Sprintf("%.0f %% remaining", (float32(user.VacationRemaining) / float32(user.VacationDays)) * float32(100)) }</div>
					</div>
					<div class="stat">
						<div class="stat-figure"></div>
						<div class="stat-title text-accent/75 text-base ">Vacation taken</div>
						<div class="-mb-1 pt-1.5 stat-value max-sm:text-2xl text-secondary opacity-40">{ fmt.Sprintf("%v d", user.VacationUsed) }</div>
						<div class="stat-desc text-accent/30">{ fmt.Sprintf("%.0f %% taken", (float32(user.VacationDays) - float32(user.VacationRemaining)) / float32(user.VacationDays) * float32(100)) }</div>
					</div>
					<div class="stat">
						<div class="stat-figure"></div>
						<div class="stat-title text-accent/75 text-base ">Vacation total</div>
						<div class="-mb-1 pt-1.5 stat-value max-sm:text-2xl text-secondary opacity-40">{ fmt.Sprintf("%v d", user.VacationDays) }</div>
						<div class="stat-desc text-accent/30">{ fmt.Sprintf("%v days total", user.VacationDays) }</div>
					</div>
					<div class="stat min-lg:!border-0">
						<div class="stat-figure"></div>
						<div class="stat-title truncate text-accent/75 text-base ">Vacation pending</div>
						<div class="-mb-1 pt-1.5 stat-value max-sm:text-2xl text-accent"><span class="animate-pulse text-primary">{ fmt.Sprintf("%v",user.PendingEvents) }</span> events</div>
						<div class="stat-desc text-accent/30">{ fmt.Sprintf("%v events pending",user.PendingEvents) }</div>
					</div>
					<div class="stat hidden"></div>
				</div>
			}
			@Card("Your year stats") {
				<div class="stats bg-base-100 max-lg:stats-vertical grid grid-cols-2 grid-rows-2 lg:grid-rows-1 lg:grid-cols-4 w-full">
					<div class="stat">
						<div class="stat-figure"></div>
						<div class="stat-title text-accent/75 text-base ">Days this year</div>
						<div class="-mb-1 pt-1.5 stat-value max-sm:text-2xl text-secondary opacity-40">{ fmt.Sprintf("%v d", progress.NumDays) }</div>
						<div class="stat-desc text-accent/30">{ fmt.Sprintf(" %v days total", progress.NumDays) }</div>
					</div>
					<div class="stat">
						<div class="stat-figure "></div>
						<div class="stat-title text-accent/75 text-base ">Days passed</div>
						<div class="-mb-1 pt-1.5 stat-value max-sm:text-2xl text-accent">{ fmt.Sprintf("%v d", progress.NumDaysPassed) }</div>
						<div class="stat-desc text-accent/30">{ fmt.Sprintf("%v days passed ", progress.NumDaysPassed) }</div>
					</div>
					<div class="stat">
						<div class="stat-figure "></div>
						<div class="stat-title text-accent/75 text-base ">Days completed</div>
						<div class="-mb-1 pt-1.5 stat-value max-sm:text-2xl text-accent">{ fmt.Sprintf("%.2f %%", progress.DaysPassedPercent) }</div>
						<div class="stat-desc text-accent/30">{ fmt.Sprintf("%.2f %% remaining", float32(100)-progress.DaysPassedPercent) }</div>
					</div>
					<div class="stat min-lg:!border-0">
						<div class="stat-figure "></div>
						<div class="pb-2.5 stat-title text-accent/75 text-base ">Days progress</div>
						@YearProgress(progress)
						<div class="stat-desc text-accent/30">{ fmt.Sprintf("%.2f %% days passed", progress.DaysPassedPercent) }</div>
					</div>
					<div class="stat hidden"></div>
				</div>
			}
			@Card("Team Vacation") {
				@YearOverview(eventHistogram)
			}
		</div>
	}
}

templ Card(title string) {
	<div class="overflow-hidden my-4 p-3 rounded-xl flex flex-col items-left justify-center">
		<h1 class="text-xl">{ title }</h1>
		<div class="border-b border-primary/25 mt-2 mb-8"></div>
		<div>
			{ children... }
		</div>
	</div>
}

templ YearProgress(progress domain.YearProgress) {
	<progress class="progress progress-primary mb-3 mt-2 h-3.5" { templ.Attributes{"value":fmt.Sprintf("%.1f", progress.DaysPassedPercent)}... } max="100" role="progressbar">
		{ fmt.Sprintf("%.1f %%", progress.DaysPassedPercent) }
	</progress>
}

templ OverviewDay(day domain.YearHistogram, index int) {
	{{
	baseStyle := "width:1rem; height:1rem; border-radius:9999px;"

	// Position in der Woche (grid-flow-col)
	weekPosition := index % 7
	// Da Montag/Dienstag dunkel waren, verschieben wir um 4 Positionen
	isWeekend := weekPosition == 3 || weekPosition == 4 // Samstag und Sonntag

	var hex string
	if day.IsHoliday {
		hex = "#7C85FF"
	} else {
		c := day.Count
		if c < 0 {
			c = 0
		}
		if c > 8 {
			c = 8
		}
		greens := []string{
			"#313745", "#a7f3d0", "#6ee7b7",
			"#34d399", "#10b981", "#059669",
			"#047857", "#065f46", "#064e3b",
		}

		hex = greens[c]

		// Base-Farbe f√ºr Wochenenden abdunkeln
		if isWeekend && c == 0 {
			hex = "#7C85FF11"
		}
	}

	shadow := ""
	if day.LastDayOfMonth {
		shadow = " box-shadow:0 1.5rem 0 -0.25rem white;"
	}

	styleAttr := fmt.Sprintf(
		"%s background-color:%s;%s",
		baseStyle, hex, shadow,
	)
	}}
	<div class="tooltip">
		<div class="tooltip-content">
			<div>{ day.Date }</div>
			<div>Count: { fmt.Sprint(day.Count) }</div>
			for _, name := range day.Usernames {
				<p>{ name }</p>
			}
		</div>
		<div { templ.Attributes{"style": styleAttr}... }></div>
	</div>
}

templ YearOverview(histogram []domain.YearHistogram) {
	{{
		totalWeeks := 1
		gaps := domain.GetMonthGaps(domain.CurrentYear())
		_, currWeek := time.Now().ISOWeek()
	}}
	<div class="grid grid-cols-12 p-5 bg-base-100 rounded-2xl overflow-x-auto mb-12">
		<div class="col-span-1"></div>
		<div class="col-span-11 grid grid-rows-1 grid-flow-col h-10 gap-1 text-secondary/70">
			for i, monthGap := range gaps {
				<p class="h-4 w-4 text-center ">{ i+1 }.</p>
				for  range monthGap {
					<p class="w-4 h-4 -z-10"></p>
				}
			}
		</div>
		<div class="col-span-1"></div>
		<div class="col-span-11 grid grid-rows-1 grid-flow-col h-10 gap-1 text-sm text-base-content/40">
			for _, monthGap := range gaps {
				if currWeek == totalWeeks {
					<p class="w-4 h-4 text-primary text-center">{ fmt.Sprint(totalWeeks) }</p>
				} else {
					<p class="w-4 h-4 text-secondary/70 text-center">{ fmt.Sprint(totalWeeks) }</p>
				}
				{{ totalWeeks++ }}
				for range monthGap {
					if currWeek == totalWeeks {
						<p class="w-4 h-4 text-primary text-center">{ fmt.Sprint(totalWeeks) }</p>
					} else {
						<p class="w-4 h-4 text-center">{ fmt.Sprint(totalWeeks) }</p>
					}
					{{ totalWeeks++ }}
				}
			}
		</div>
		<div class="col-span-1 grid grid-rows-7 text-secondary/60 text-sm">
			<p class="truncate">Montag</p>
			<p class="truncate">Dienstag</p>
			<p class="truncate">Mittwoch</p>
			<p class="truncate">Donnerstag</p>
			<p class="truncate">Freitag</p>
			<p class="opacity-50 truncate">Samstag</p>
			<p class="opacity-50 truncate">Sonntag</p>
		</div>
		<div class="col-span-11 grid grid-rows-7 h-80 grid-flow-col gap-1">
			for range domain.GetYearOffset(domain.CurrentYear()) {
				<p></p>
			}
			for i, d := range histogram {
				@OverviewDay(d, i)
			}
		</div>
	</div>
}
