package templates

import (
	"calendar/schemas"
	"calendar/db/repo"
	"calendar/service"
	"fmt"
	"strings"
)

templ Event(event schemas.Event, user repo.User) {
	{{
	bgColor := service.GenerateHSL(int(event.UserID))
	eventId := fmt.Sprintf("event-%v", event.ID)
	deleteUrl := fmt.Sprintf("#%v", eventId)
	}}
	<div class="indicator w-full">
		<span
			if event.State == "pending" {
				class="indicator-item indicator-start left-3 top-3 badge badge-ghost"
			}
			if event.State == "declined" {
				class="indicator-item indicator-start left-3 top-3 badge badge-error"
			}
		></span>
		<div
			id={ eventId }
			{ templ.Attributes{"style":fmt.Sprintf("background-color: %v;", bgColor)}... }
			class="text-center relative  w-full rounded text-base-content"
		>
			if event.UserID == user.ID {
				<button
					hx-swap="delete"
					hx-target={ deleteUrl }
					hx-delete={ fmt.Sprintf("/events/%v", event.ID) }
					class="btn btn-ghost rounded text-xl p-0 icon-outlined absolute right-0"
				>close</button>
			}
			<div class="text-md">{ strings.Title(event.Name) }</div>
			<div class="text-sm">{ event.Username }</div>
		</div>
	</div>
}

templ CreateEventUpdate(event schemas.Event, user repo.User, vacationUsed int, notificationCount int) {
	@Event(event, user)
	@VacationCounter(user, vacationUsed)
	@NotificationIndicator(notificationCount)
}

templ Message(message string, mtype string) {
	<div hx-swap-oob="beforeend:#message-banner">
		<div
			if mtype == "success" {
				class="bg-success rounded-xl p-4 text-xl text-neutral"
			}
			else
			if mtype == "info" {
				class="bg-info rounded-xl p-4 text-xl text-neutral"
			}
			else
			if mtype == "error" {
				class="bg-error rounded-xl p-4 text-xl text-neutral"
			}
		>{ message }</div>
	</div>
}

templ UpdateNotifications(notifications []repo.Notification) {
	@NotificationContainer(notifications)
	@NotificationIndicator(len(notifications))
}

templ NotificationIndicator(num int) {
	if num > 0 {
		<span id="notification-indicator" hx-swap-oob="true" class="indicator-item align-items-start badge badge-primary">{ fmt.Sprint(num) }</span>
	} else {
		<span id="notification-indicator" hx-swap-oob="true"></span>
	}
}

templ NotificationContainer(notifications []repo.Notification) {
	<ul id="notification-container" tabindex="0" class="dropdown-content menu bg-base-200 rounded-box z-[1] w-52 p-2 shadow">
		for _, n := range notifications {
			<li id={ fmt.Sprintf("notification-%v", n.ID) }><div><p>{ n.Message }</p><button hx-patch={ fmt.Sprintf("/notifications/%v", n.ID) } hx-swap="delete" hx-target={ fmt.Sprintf("#notification-%v", n.ID) } class="btn btn-ghost text-xl icon-outlined">close</button></div></li>
		}
		<button class="btn btn-ghost btn-sm" hx-patch="/notifications" hx-swap="delete" hx-target="#notification-container">Clear All</button>
	</ul>
}
