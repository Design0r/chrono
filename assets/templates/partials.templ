package templates

import (
	"chrono/config"
	"chrono/internal/domain"
	"fmt"
	"strings"
	"time"
)

templ Event(event domain.EventUser, user domain.User) {
	{{
		cfg := config.GetConfig()
		h, s, l := domain.Color.HexToHSL(event.User.Color)
		borderColor := fmt.Sprintf("hsla(%.0f, %.1f%%, %.1f%%, 0.6)", h, s*100, l*100)
		bgColor := fmt.Sprintf("hsla(%.0f, %.1f%%, %.1f%%, 0.20)", h, s*100, l*100)
		if !event.Event.IsVacation() && event.User.Username != cfg.BotName {
			h, s, l := domain.Color.HexToHSL(event.User.Color)
			borderColor = fmt.Sprintf("hsla(%.0f, %.1f%%, %.1f%%, 0.30)", h, s*100, l*100)
			bgColor = fmt.Sprintf("hsla(%.0f, %.1f%%, %.1f%%, 0.10)", h, s*100, l*100)
			// Auch hier Transparenz hinzufügen falls gewünscht
		}
		eventId := fmt.Sprintf("event-%v", event.Event.ID)
		deleteUrl := fmt.Sprintf("#%v", eventId)
	}}
	<div
		id={ eventId }
		class="indicator w-full"
	>
		<div class="absolute top-1.5 right-1.5 z-10 w-3 bg-neutral/50 aspect-square rounded-full flex items-center justify-center">
			<span
				if event.Event.State == "pending" {
					class="bg-accent status status-sm status-accent animate-ping"
				}
				if event.Event.State == "declined" {
					class="status status-md status-error"
				}
				if event.Event.State == "accepted" {
					class="status status-md status-success"
				}
			></span>
		</div>
		<div
			{ templ.Attributes{"style":fmt.Sprintf("background-color: %v; border-color: %v;", bgColor, borderColor)}... }
			class="group relative text-center border py-1 w-full rounded-lg"
		>
			if (event.User.ID == user.ID && (event.Event.State != "accepted" || event.Event.ScheduledAt.Compare(time.Now()) == 1 || !event.Event.IsVacation())) || user.IsSuperuser {
				<span class="flex items-center justify-center text-transparent rounded-lg group-hover:mix-blend-revert group-hover:text-base-content absolute top-0 left-0 w-full h-full icon-outlined animate-all">
					<button
						hx-swap="delete"
						hx-target={ deleteUrl }
						hx-delete={ fmt.Sprintf("/events/%v", event.Event.ID) }
						class="h-9 w-12 text-center rounded-xl cursor-pointer hover:drop-shadow-lg icon-outlined group-hover:bg-neutral/30 group-hover:text-base-content hover:text-error-content hover:duration-1000 hover:bg-error/80 hover:w-full hover:h-full hover:rounded-lg animate-all"
					>delete</button>
				</span>
				<div class="text-base-content group-hover:text-white/0 animate-all">{ strings.Title(event.Event.Name) }</div>
				<div class="pb-1 text-xs text-base-content/80 group-hover:text-white/0 animate-all">{ event.User.Username }</div>
			} else {
				<div class="text-base-content animate-all">{ strings.Title(event.Event.Name) }</div>
				<div class="pb-1 text-xs text-base-content/80 animate-all">{ event.User.Username }</div>
			}
		</div>
	</div>
}

templ CreateEventUpdate(event domain.EventUser, user domain.UserWithVacation, notificationCount int) {
	@Event(event, user.User)
	@VacationCounter(user)
	@NotificationIndicator(notificationCount)
}

templ Message(message string, mtype string) {
	<div hx-swap-oob="beforeend:#message-banner">
		<div
			if mtype == "success" {
				class="btn btn-lg btn-soft btn-primary"
			}
			else
			if mtype == "info" {
				class="btn btn-lg btn-soft btn-warning"
			}
			else
			if mtype == "error" {
				class="btn btn-lg btn-soft btn-error"
			}
		>{ message }</div>
	</div>
}

templ UpdateNotifications(notifications []domain.Notification) {
	@NotificationContainer(notifications)
	@NotificationIndicator(len(notifications))
}

templ NotificationIndicator(num int) {
	if num > 0 {
		<span
			id="notification-indicator"
			hx-swap-oob="true"
			class="indicator-item font-bold rounded-full align-items-start text-white/85 border-1 border-error/50 badge badge-error backdrop-blur-md bg-error/40 p-0 h-6 px-2 pointer-events-none"
		>{ fmt.Sprint(num) }</span>
	} else {
		<span id="notification-indicator" hx-swap-oob="true"></span>
	}
}

templ NotificationContainer(notifications []domain.Notification) {
	<ul id="notification-container" tabindex="0" class="mt-1.5 min-w-64 pt-4 pb-3 px-3 dropdown-content menu bg-info/20 backdrop-blur-xl rounded-box z-10 drop-shadow-xl">
		<p class="px-3 pb-2 text-lg font-bold">Notifications</p>
		<hr class="border-base-200/80 pb-2"/>
		for _, n := range notifications {
			<li id={ fmt.Sprintf("notification-%v", n.ID) } class="py-1">
				<div class="hover:text-white">
					<p>{ n.Message }</p>
					<button
						hx-patch={ fmt.Sprintf("/notifications/%v", n.ID) }
						hx-swap="delete"
						hx-target={ fmt.Sprintf("#notification-%v", n.ID) }
						class="btn btn-soft border-0 hover:border-0 bg-base-200/50 text-xl font-semibold icon-outlined hover:bg-primary hover:text-neutral animate-color"
					>close</button>
				</div>
			</li>
		}
		<button
			class="mt-4 btn btn-soft rounded-xl text-neutral border-0 hover:border-0 bg-primary/90 font-semibold hover:bg-primary hover:text-neutral animate-color"
			hx-patch="/notifications"
			hx-swap="delete"
			hx-target="#notification-container"
		>Clear All</button>
	</ul>
}

templ UpdateProfileWithMessage(user domain.User, notifications []domain.Notification) {
	@Profile(user, notifications)
	@Message("Successfully updated profile", "success")
}

templ CalendarCore(month domain.Month, user domain.User, userFilter, eventFilter string) {
	<div id="calendar" class="my-12 lg:my-8 lg:mt-0 mx-auto grid px-6 grid-cols-1 gap-y-6 lg:grid-cols-7 lg:px-4 gap-x-2 lg:gap-y-4 overflow-x-scroll">
		@WeekdayHeader("Monday", month)
		@WeekdayHeader("Tuesday", month)
		@WeekdayHeader("Wednesday", month)
		@WeekdayHeader("Thursday", month)
		@WeekdayHeader("Friday", month)
		@WeekdayHeader("Saturday", month)
		@WeekdayHeader("Sunday", month)
		for range month.Offset {
			<div class="hidden lg:block"></div>
		}
		for _, day := range month.Days {
			@Day(month.Year, month.Number, day, user)
		}
	</div>
}

templ CalendarCoreResponse(month domain.Month, user domain.User, userFilter, eventFilter string) {
	<div id="calendar" class="my-12 lg:my-8 lg:mt-0 mx-auto grid px-6 grid-cols-1 gap-y-6 lg:grid-cols-7 lg:px-4 gap-x-2 lg:gap-y-4 overflow-x-scroll">
		@WeekdayHeader("Monday", month)
		@WeekdayHeader("Tuesday", month)
		@WeekdayHeader("Wednesday", month)
		@WeekdayHeader("Thursday", month)
		@WeekdayHeader("Friday", month)
		@WeekdayHeader("Saturday", month)
		@WeekdayHeader("Sunday", month)
		for range month.Offset {
			<div class="hidden lg:block"></div>
		}
		for _, day := range month.Days {
			@Day(month.Year, month.Number, day, user)
		}
	</div>
	@MonthNavigation(month, userFilter, eventFilter)
}
