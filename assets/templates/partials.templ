package templates

import (
	"chrono/config"
	"chrono/internal/domain"
	"chrono/internal/domain/calendar"
	"fmt"
	"go.lsp.dev/pkg/event"
	"strings"
	"time"
)

templ Event(event domain.EventUser, user domain.User) {
	{{
		event.Event.
			cfg := config.GetConfig()
		bgColor := domain.Color.HSLToString(domain.Color.HexToHSL(event.User.Color))
		if !event.Event.IsVacation() && event.User.Username != cfg.BotName {
			bgColor = domain.Color.HSLDarkFromHex(event.User.Color)
		}
		eventId := fmt.Sprintf("event-%v", event.Event.ID)
		deleteUrl := fmt.Sprintf("#%v", eventId)
	}}
	<div
		id={ eventId }
		class="indicator w-full"
	>
		<span
			if event.Event.State == "pending" {
				class="indicator-item indicator-start left-4 top-4 w-3.5 h-3.5 border-2 border-base-100 rounded-badge badge-info "
			}
			if event.Event.State == "declined" {
				class="indicator-item indicator-start left-4 top-4 w-3.5 h-3.5 border-2 border-base-100 rounded-badge badge-error"
			}
		></span>
		<div
			{ templ.Attributes{"style":fmt.Sprintf("background-color: %v;", bgColor)}... }
			class="text-center py-1 relative w-full rounded-lg"
		>
			if (event.User.ID == user.ID && (event.Event.State != "accepted" || event.Event.ScheduledAt.Compare(time.Now()) == 1 || !event.Event.IsVacation())) || user.IsSuperuser {
				<span>
					<button
						hx-swap="delete"
						hx-target={ deleteUrl }
						hx-delete={ fmt.Sprintf("/events/%v", event.Event.ID) }
						class="flex text-white text-opacity-80 hover:text-error transition-colors items-start rounded-xl text-lg p-0 icon-outlined absolute right-1 top-0.5"
					>close</button>
				</span>
			}
			<div class="text-md text-white text-opacity-80 ">{ strings.Title(event.Event.Name) }</div>
			<div class="text-sm text-base-content text-opacity-80 ">{ event.User.Username }</div>
		</div>
	</div>
}

templ CreateEventUpdate(event domain.EventUser, user domain.User, vacRemaining float64, vacUsed float64, pendingEvents int, notificationCount int) {
	@Event(event, user)
	@VacationCounter(user, vacRemaining, vacUsed, pendingEvents)
	@NotificationIndicator(notificationCount)
}

templ Message(message string, mtype string) {
	<div hx-swap-oob="beforeend:#message-banner">
		<div
			if mtype == "success" {
				class="bg-success rounded-xl p-4 text-xl text-neutral"
			}
			else
			if mtype == "info" {
				class="bg-info rounded-xl p-4 text-xl text-neutral"
			}
			else
			if mtype == "error" {
				class="bg-error rounded-xl p-4 text-xl text-neutral"
			}
		>{ message }</div>
	</div>
}

templ UpdateNotifications(notifications []domain.Notification) {
	@NotificationContainer(notifications)
	@NotificationIndicator(len(notifications))
}

templ NotificationIndicator(num int) {
	if num > 0 {
		<span
			id="notification-indicator"
			hx-swap-oob="true"
			class="indicator-item align-items-start badge badge-primary"
		>{ fmt.Sprint(num) }</span>
	} else {
		<span id="notification-indicator" hx-swap-oob="true"></span>
	}
}

templ NotificationContainer(notifications []domain.Notification) {
	<ul id="notification-container" tabindex="0" class="dropdown-content menu bg-base-200 rounded-box z-[1] w-52 p-2 shadow">
		for _, n := range notifications {
			<li id={ fmt.Sprintf("notification-%v", n.ID) }>
				<div>
					<p>{ n.Message }</p>
					<button
						hx-patch={ fmt.Sprintf("/notifications/%v", n.ID) }
						hx-swap="delete"
						hx-target={ fmt.Sprintf("#notification-%v", n.ID) }
						class="btn btn-ghost text-xl icon-outlined"
					>close</button>
				</div>
			</li>
		}
		<button
			class="btn btn-ghost font-normal btn-sm"
			hx-patch="/notifications"
			hx-swap="delete"
			hx-target="#notification-container"
		>Clear All</button>
	</ul>
}

templ UpdateProfileWithMessage(user domain.User, notifications []domain.Notification) {
	@Profile(user, notifications)
	@Message("Successfully updated profile", "success")
}

templ AdminCheckbox(currUser domain.User, userId int64, isSuperuser bool, form bool) {
	{{
	icon := "check_box_outline_blank"
	if isSuperuser {
		icon = "check_box"
	}
	}}
	<td id={ fmt.Sprintf("admin-%v", userId) } class="icon-outlined">
		if currUser.IsSuperuser && form {
			<a
				hx-put={ fmt.Sprintf("profile/%v/admin", userId) }
				hx-swap="outerHTML"
				hx-target={ fmt.Sprintf("#admin-%v", userId) }
				class="icon-outlined cursor-pointer"
			>{ icon }</a>
		} else {
			{ icon }
		}
	</td>
}

templ CalendarCore(month calendar.Month, user domain.User, userFilter, eventFilter string) {
	<div id="calendar" class="grid grid-cols-7 gap-x-2 gap-y-2">
		@WeekdayHeader("Monday", month)
		@WeekdayHeader("Tuesday", month)
		@WeekdayHeader("Wednesday", month)
		@WeekdayHeader("Thursday", month)
		@WeekdayHeader("Friday", month)
		@WeekdayHeader("Saturday", month)
		@WeekdayHeader("Sunday", month)
		for range month.Offset {
			<div></div>
		}
		for _, day := range month.Days {
			@Day(month.Year, month.Number, day, user)
		}
	</div>
}

templ CalendarCoreResponse(month calendar.Month, user domain.User, userFilter, eventFilter string) {
	<div id="calendar" class="grid grid-cols-7 gap-x-2 gap-y-2">
		@WeekdayHeader("Monday", month)
		@WeekdayHeader("Tuesday", month)
		@WeekdayHeader("Wednesday", month)
		@WeekdayHeader("Thursday", month)
		@WeekdayHeader("Friday", month)
		@WeekdayHeader("Saturday", month)
		@WeekdayHeader("Sunday", month)
		for range month.Offset {
			<div></div>
		}
		for _, day := range month.Days {
			@Day(month.Year, month.Number, day, user)
		}
	</div>
	@MonthNavigation(month, userFilter, eventFilter)
}
