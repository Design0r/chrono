package templates

import (
	"chrono/internal/domain"
	"fmt"
	"time"
)

templ Requests(user *domain.User, requests []domain.BatchRequest, notifications []domain.Notification) {
	@Index(user, notifications) {
		<div id="reject-modal"></div>
		<div class="p-2 my-2">
			<div class="overflow-x-auto bg-info/3">
				<table class="table table-zebra table-md ">
					<thead>
						<tr class="bg-base-200 text-base-content border-b-1.5 border-primary/65">
							<th>ID</th>
							<th>Name</th>
							// <th>Message</th>
							<th>Event Type</th>
							<th>Number of Days</th>
							<th>Event Start Date</th>
							<th>Event End Date</th>
							<th>Conflicts</th>
							<th class="text-center">Actions</th>
							// <th></th>
						</tr>
					</thead>
					<tbody>
						for _, request := range requests {
							@RequestRow(request)
						}
					</tbody>
				</table>
			</div>
		</div>
	}
}

templ RequestRow(request domain.BatchRequest) {
	{{
	// msg := ""
	// if request.Request.Message != nil {
	// 	msg = *request.Request.Message
	// }
	startYear, startMonth, startDay := request.StartDate.Date()
	endYear, endMonth, endDay := request.EndDate.Date()
	}}
	<tr id={ fmt.Sprintf("request-%v", request.Request.ID) } class="hover:bg-primary/10 pt-8 border-b-1 border-primary/25 text-base-content/80 hover:text-primary animate-color">
		<td>{ fmt.Sprint(request.Request.ID) }</td>
		<td>{ request.Request.Username }</td>
		// <td class="truncate min-w-40">{ msg }</td>
		<td>{ request.Request.Name }</td>
		<td>{ fmt.Sprint(request.EventCount) } <span class="opacity-40 px-1">days</span></td>
		<td>{ fmt.Sprintf("%v. %v %v",startDay, startMonth, startYear) }</td>
		<td>{ fmt.Sprintf("%v. %v %v",endDay, endMonth, endYear) }</td>
		<td class="align-middle">
			if request.Conflicts != nil {
				<div class="flex flex-wrap space-x-2 space-y-2">
					for _, user := range *request.Conflicts {
						<span class="badge badge-soft badge-info badge-sm cursor-default hover:text-white/60 hover:bg-info/20 animate-color">
							{ user.Username }
						</span>
					}
				</div>
			}
		</td>
		<td class="flex justify-center align-middle gap-2">
			<button
				hx-patch="/requests"
				hx-vals={ fmt.Sprintf("{\"state\":\"accepted\", \"start_date\":\"%v\", \"end_date\":\"%v\", \"user_id\":\"%v\"}", request.StartDate.Unix(), request.EndDate.Unix(), request.Request.UserID) }
				hx-swap="delete"
				hx-target={ fmt.Sprintf("#request-%v", request.Request.ID) }
				class="btn btn-soft btn-sm btn-primary icon-outlined animate-color"
			>
				check
			</button>
			<button
				hx-get="/requests/modal"
				hx-target="#reject-modal"
				hx-swap="outerHTML"
				hx-vals={ fmt.Sprintf("{\"start_date\":\"%v\", \"end_date\":\"%v\", \"user_id\":\"%v\", \"request_id\":\"%v\"}", request.StartDate.Unix(), request.EndDate.Unix(), request.Request.UserID, request.Request.ID) }
				class="btn btn-soft btn-sm btn-error icon-outlined animate-color"
			>
				close
			</button>
		</td>
	</tr>
}

templ RejectModal(message *string, startDate time.Time, endDate time.Time, userId int64, requestId int64) {
	<div id="reject-modal">
		<div id="blur-bg" class="fixed z-10 inset-0 bg-opacity-50 backdrop-blur-md flex items-center justify-center">
			<dialog id="inner-modal" class="modal modal-open">
				<div class="modal-box">
					<button id="close-modal" class="absolute cursor-pointer right-3 top-3 icon-outlined items-end text-xl justify-end">close</button>
					<h1 class="text-xl font-bold">Reject Requeust</h1>
					if message != nil {
						<h4>{ *message }</h4>
					}
					<div class="modal-backdrop">
						<h5>Reject Reason</h5>
						<textarea
							id="modal-reason"
							class="textarea w-full text-white textarea-bordered"
							type="text"
						></textarea>
						<br/>
						<button
							id="reject-btn"
							hx-patch="requests"
							hx-vals={ fmt.Sprintf("js:{state:\"declined\", start_date:\"%v\", end_date:\"%v\", user_id:\"%v\", reason: getReason()}", startDate.Unix(), endDate.Unix(), userId) }
							hx-swap="delete"
							hx-target={ fmt.Sprintf("#request-%v", requestId) }
							hx-on::after-request="closeModal()"
							class="btn btn-error text-xl animate-color"
						>Reject</button>
					</div>
				</div>
			</dialog>
		</div>
	</div>
	<script>
  {
    function getReason() {return document.getElementById("modal-reason").value}
    const bg = document.querySelector('#blur-bg')
    const modal = document.querySelector('#inner-modal')
    const btn = document.querySelector('#reject-btn')
    const closeBtn = document.querySelector('#close-modal')
    
    function closeModal() {bg.remove()}
  
    // btn.addEventListener("click", (event) => {bg.remove()})
    closeBtn.addEventListener("click", (event) => {bg.remove()})
    bg.addEventListener("click", (event) => {
      if (event.target === bg) closeModal()
    })
  }
  </script>
}
