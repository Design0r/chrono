package templates

import (
	"chrono/internal/domain"
	"fmt"
	"time"
)

templ Requests(user *domain.User, requests []domain.BatchRequest, notifications []domain.Notification) {
	@Index(user, notifications) {
		<div id="reject-modal"></div>
		<div class="p-2">
			<div class="pt-2 bg-base-200 rounded-xl">
				<table class="table rounded-xl">
					<thead>
						<tr class="text-[15px] text-base-content border-b-2 border-base-content border-opacity-10">
							<th>ID</th>
							<th>Name</th>
							<th>Message</th>
							<th>Event Type</th>
							<th>Number of Days</th>
							<th>Event Start Date</th>
							<th>Event End Date</th>
							<th></th>
							<th></th>
							<th>Conflicts</th>
						</tr>
					</thead>
					<tbody>
						for _, request := range requests {
							@RequestRow(request)
						}
					</tbody>
				</table>
			</div>
		</div>
	}
}

templ RequestRow(request domain.BatchRequest) {
	{{
	msg := ""
	if request.Request.Message != nil {
		msg = *request.Request.Message
	}
	startYear, startMonth, startDay := request.StartDate.Date()
	endYear, endMonth, endDay := request.EndDate.Date()
	}}
	<tr id={ fmt.Sprintf("request-%v", request.Request.ID) } class="hover:bg-base-300 pt-8 border-b-2 border-base-100 opacity-80 border-opacity-50">
		<td>{ fmt.Sprint(request.Request.ID) }</td>
		<td>{ request.Request.Username }</td>
		<td>{ msg }</td>
		<td>{ request.Request.Name }</td>
		<td>{ fmt.Sprint(request.EventCount) }</td>
		<td>{ fmt.Sprintf("%v. %v %v",startDay, startMonth, startYear) }</td>
		<td>{ fmt.Sprintf("%v. %v %v",endDay, endMonth, endYear) }</td>
		<td>
			<button
				hx-patch="/requests"
				hx-vals={ fmt.Sprintf("{\"state\":\"accepted\", \"start_date\":\"%v\", \"end_date\":\"%v\", \"user_id\":\"%v\"}", request.StartDate.Unix(), request.EndDate.Unix(), request.Request.UserID) }
				hx-swap="delete"
				hx-target={ fmt.Sprintf("#request-%v", request.Request.ID) }
				class="btn btn-ghost border-success text-success hover:bg-success hover:text-base-300 icon-outlined text-xl float-end"
			>
				check
			</button>
		</td>
		<td>
			<button
				hx-get="/requests/modal"
				hx-target="#reject-modal"
				hx-swap="outerHTML"
				hx-vals={ fmt.Sprintf("{\"start_date\":\"%v\", \"end_date\":\"%v\", \"user_id\":\"%v\", \"request_id\":\"%v\"}", request.StartDate.Unix(), request.EndDate.Unix(), request.Request.UserID, request.Request.ID) }
				class="btn btn-ghost border-error text-error hover:bg-error hover:text-base-300 icon-outlined text-xl float-start"
			>
				close
			</button>
		</td>
		<td>
			if request.Conflicts != nil {
				<div class="flex flex-col space-y-1">
					for _, user := range *request.Conflicts {
						<span class="badge badge-error flex">
							{ user.Username }
						</span>
					}
				</div>
			}
		</td>
	</tr>
}

templ RejectModal(message *string, startDate time.Time, endDate time.Time, userId int64, requestId int64) {
	<div id="reject-modal">
		<div id="blur-bg" class="fixed z-10 inset-0 bg-opacity-50 backdrop-blur-md flex items-center justify-center">
			<div id="inner-modal" class="modal-box">
				<button id="close-modal" class="absolute right-3 top-3 icon-outlined items-end text-xl justify-end">close</button>
				<h1 class="text-xl font-bold">Reject Requeust</h1>
				if message != nil {
					<h4>{ *message }</h4>
				}
				<div class="modal-backdrop">
					<h5>Reject Reason</h5>
					<textarea
						id="modal-reason"
						class="textarea w-full text-white textarea-bordered"
						type="text"
					></textarea>
					<br/>
					<button
						id="reject-btn"
						hx-patch="requests"
						hx-vals={ fmt.Sprintf("js:{state:\"declined\", start_date:\"%v\", end_date:\"%v\", user_id:\"%v\", reason: getReason()}", startDate.Unix(), endDate.Unix(), userId) }
						hx-swap="delete"
						hx-target={ fmt.Sprintf("#request-%v", requestId) }
						class="btn btn-error text-xl"
					>Reject</button>
				</div>
			</div>
		</div>
	</div>
	<script>
  {
    function getReason() {return document.getElementById("modal-reason").value}
    const bg = document.querySelector('#blur-bg')
    const modal = document.querySelector('#inner-modal')
    const btn = document.querySelector('#reject-btn')
    const closeBtn = document.querySelector('#close-modal')
    
    const closeModal = () => {bg.remove()}
  
    btn.addEventListener("click", (event) => {bg.remove()})
    closeBtn.addEventListener("click", (event) => {bg.remove()})
    bg.addEventListener("click", (event) => {
      if (event.target === bg) closeModal()
    })
  }
  </script>
}
