package templates

import "chrono/db/repo"
import "fmt"
import "chrono/schemas"
import "time"

templ Requests(user *repo.User, requests []schemas.BatchRequest, notifications []repo.Notification) {
	@Index(user, notifications) {
		<div id="reject-modal"></div>
		<div class="p-2 ">
			<div class="bg-base-300 overflow-x-auto">
				<table class="table">
					<thead>
						<tr>
							<th>ID</th>
							<th>Name</th>
							<th>Message</th>
							<th>Event Type</th>
							<th>Number of Days</th>
							<th>Event Start Date</th>
							<th>Event End Date</th>
							<th></th>
							<th></th>
						</tr>
					</thead>
					<tbody>
						for _, request := range requests {
							@RequestRow(request)
						}
					</tbody>
				</table>
			</div>
		</div>
	}
}

templ RequestRow(request schemas.BatchRequest) {
	{{
	msg := ""
	if request.Request.Message != nil {
		msg = *request.Request.Message
	}
	startYear, startMonth, startDay := request.StartDate.Date()
	endYear, endMonth, endDay := request.EndDate.Date()
	}}
	<tr id={ fmt.Sprintf("request-%v", request.Request.ID) } class="hover">
		<td>{ fmt.Sprint(request.Request.ID) }</td>
		<td>{ request.Request.Username }</td>
		<td>{ msg }</td>
		<td>{ request.Request.Name }</td>
		<td>{ fmt.Sprint(request.EventCount) }</td>
		<td>{ fmt.Sprintf("%v. %v %v",startDay, startMonth, startYear) }</td>
		<td>{ fmt.Sprintf("%v. %v %v",endDay, endMonth, endYear) }</td>
		<td
			hx-patch="/requests"
			hx-vals={ fmt.Sprintf("{\"state\":\"accepted\", \"start_date\":\"%v\", \"end_date\":\"%v\", \"user_id\":\"%v\"}", request.StartDate.Unix(), request.EndDate.Unix(), request.Request.UserID) }
			hx-swap="delete"
			hx-target={ fmt.Sprintf("#request-%v", request.Request.ID) }
			class="icon-outlined btn btn-ghost text-xl"
		>
			check
		</td>
		<td
			hx-get="/requests/modal"
			hx-target="#reject-modal"
			hx-swap="outerHTML"
			hx-vals={ fmt.Sprintf("{\"start_date\":\"%v\", \"end_date\":\"%v\", \"user_id\":\"%v\", \"request_id\":\"%v\"}", request.StartDate.Unix(), request.EndDate.Unix(), request.Request.UserID, request.Request.ID) }
			class="btn icon-outlined text-xl"
		>close</td>
	</tr>
}

templ RejectModal(message *string, startDate time.Time, endDate time.Time, userId int64, requestId int64) {
	<div id="reject-modal" class="fixed z-10 inset-0 bg-opacity-50 backdrop-blur-md flex items-center justify-center">
		<div class="modal-box">
			<h3 class="text-lg font-bold">Reject Requeust</h3>
			if message != nil {
				<h4>{ *message }</h4>
			}
			<div class="modal-backdrop">
				<h5>Reject Reason</h5>
				<textarea
					id="modal-reason"
					class="textarea w-full text-white textarea-bordered"
					type="text"
				></textarea>
				<br/>
				<button
					id="reject-btn"
					hx-patch="requests"
					hx-vals={ fmt.Sprintf("js:{state:\"declined\", start_date:\"%v\", end_date:\"%v\", user_id:\"%v\", reason: getReason()}", startDate.Unix(), endDate.Unix(), userId) }
					hx-swap="delete"
					hx-target={ fmt.Sprintf("#request-%v", requestId) }
					class="btn btn-error text-xl"
				>Reject</button>
			</div>
		</div>
	</div>
	<script>
  function getReason(){
    return document.getElementById("modal-reason").value
  }
  {
    const modal = document.querySelector('#reject-modal')
    const btn = document.querySelector('#reject-btn')
  
    modal.addEventListener('click', (event) => {
      if (event.target === modal){
        modal.remove()
      }
    })
    btn.addEventListener("click", (event) => {
      modal.remove()
      })
  }
</script>
}
