// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_cache.sql

package repo

import (
	"context"
)

const CacheExists = `-- name: CacheExists :one
SELECT EXISTS(
    SELECT 1 FROM api_cache
    WHERE year = ?
)
`

func (q *Queries) CacheExists(ctx context.Context, year int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, CacheExists, year)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const CreateCache = `-- name: CreateCache :exec
INSERT INTO api_cache (year)
VALUES (?)
`

func (q *Queries) CreateCache(ctx context.Context, year int64) error {
	_, err := q.db.ExecContext(ctx, CreateCache, year)
	return err
}

const GetApiCacheYears = `-- name: GetApiCacheYears :many
SELECT year FROM api_cache
GROUP BY year
`

func (q *Queries) GetApiCacheYears(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, GetApiCacheYears)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var year int64
		if err := rows.Scan(&year); err != nil {
			return nil, err
		}
		items = append(items, year)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
