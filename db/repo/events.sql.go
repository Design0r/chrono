// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package repo

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (scheduled_at)
VALUES (?)
RETURNING id, scheduled_at, created_at, edited_at
`

func (q *Queries) CreateEvent(ctx context.Context, scheduledAt time.Time) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, scheduledAt)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ScheduledAt,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const getEventsForDay = `-- name: GetEventsForDay :many
SELECT id, scheduled_at, created_at, edited_at FROM events 
WHERE Date(scheduled_at) = ?
`

func (q *Queries) GetEventsForDay(ctx context.Context, scheduledAt time.Time) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsForDay, scheduledAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ScheduledAt,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
