// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notification_user.sql

package repo

import (
	"context"
)

const clearAllUserNotifications = `-- name: ClearAllUserNotifications :exec
UPDATE notifications
SET viewed_at = CURRENT_TIMESTAMP
WHERE id IN (
    SELECT n.id
    FROM notifications n
    JOIN notification_user nu ON n.id = nu.notification_id
    WHERE nu.user_id = ?
    AND n.viewed_at IS NULL
)
`

func (q *Queries) ClearAllUserNotifications(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, clearAllUserNotifications, userID)
	return err
}

const createNotificationUser = `-- name: CreateNotificationUser :exec
INSERT INTO notification_user (notification_id, user_id)
VALUES (?, ?)
`

type CreateNotificationUserParams struct {
	NotificationID int64 `json:"notification_id"`
	UserID         int64 `json:"user_id"`
}

func (q *Queries) CreateNotificationUser(ctx context.Context, arg CreateNotificationUserParams) error {
	_, err := q.db.ExecContext(ctx, createNotificationUser, arg.NotificationID, arg.UserID)
	return err
}

const getUserNotifications = `-- name: GetUserNotifications :many
SELECT n.id, n.message, n.created_at, n.viewed_at from notification_user nu
JOIN notifications n ON nu.notification_id = n.id
WHERE nu.user_id = ?
AND n.viewed_at IS NULL
`

func (q *Queries) GetUserNotifications(ctx context.Context, userID int64) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getUserNotifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
