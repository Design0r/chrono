// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token_refresh.sql

package repo

import (
	"context"
)

const CreateRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO token_refresh (user_id, year)
VALUES (?,?)
RETURNING id, year, user_id, created_at
`

type CreateRefreshTokenParams struct {
	UserID int64 `json:"user_id"`
	Year   int64 `json:"year"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (TokenRefresh, error) {
	row := q.db.QueryRowContext(ctx, CreateRefreshToken, arg.UserID, arg.Year)
	var i TokenRefresh
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteAllRefreshTokens = `-- name: DeleteAllRefreshTokens :exec
DELETE FROM token_refresh
`

func (q *Queries) DeleteAllRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, DeleteAllRefreshTokens)
	return err
}

const GetRefreshToken = `-- name: GetRefreshToken :one
SELECT Count(*) FROM token_refresh
WHERE user_id = ?
AND year = ?
`

type GetRefreshTokenParams struct {
	UserID int64 `json:"user_id"`
	Year   int64 `json:"year"`
}

func (q *Queries) GetRefreshToken(ctx context.Context, arg GetRefreshTokenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetRefreshToken, arg.UserID, arg.Year)
	var count int64
	err := row.Scan(&count)
	return count, err
}
