// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repo

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, vacation_days, email, password, is_superuser)
VALUES (?, ?, ?, ?, ?)
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at
`

type CreateUserParams struct {
	Username     string `json:"username"`
	VacationDays int64  `json:"vacation_days"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	IsSuperuser  bool   `json:"is_superuser"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.VacationDays,
		arg.Email,
		arg.Password,
		arg.IsSuperuser,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAdmins = `-- name: GetAdmins :many
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at FROM users
WHERE is_superuser = true
`

func (q *Queries) GetAdmins(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.VacationDays,
			&i.IsSuperuser,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at FROM users
WHERE username = ?
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const getUsersWithVacationCount = `-- name: GetUsersWithVacationCount :many
SELECT 
    users.id, users.username, users.email, users.password, users.vacation_days, users.is_superuser, users.created_at, users.edited_at,
    COUNT(events.id) AS vacation_count
FROM 
    users
LEFT JOIN 
    events
ON 
    users.id = events.user_id
    AND events.name = "urlaub"
    AND events.scheduled_at >= ?
    AND events.scheduled_at < ?
GROUP BY 
    users.id, users.username, users.email, users.vacation_days
`

type GetUsersWithVacationCountParams struct {
	ScheduledAt   time.Time `json:"scheduled_at"`
	ScheduledAt_2 time.Time `json:"scheduled_at_2"`
}

type GetUsersWithVacationCountRow struct {
	ID            int64     `json:"id"`
	Username      string    `json:"username"`
	Email         string    `json:"email"`
	Password      string    `json:"password"`
	VacationDays  int64     `json:"vacation_days"`
	IsSuperuser   bool      `json:"is_superuser"`
	CreatedAt     time.Time `json:"created_at"`
	EditedAt      time.Time `json:"edited_at"`
	VacationCount int64     `json:"vacation_count"`
}

func (q *Queries) GetUsersWithVacationCount(ctx context.Context, arg GetUsersWithVacationCountParams) ([]GetUsersWithVacationCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersWithVacationCount, arg.ScheduledAt, arg.ScheduledAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithVacationCountRow
	for rows.Next() {
		var i GetUsersWithVacationCountRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.VacationDays,
			&i.IsSuperuser,
			&i.CreatedAt,
			&i.EditedAt,
			&i.VacationCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleAdmin = `-- name: ToggleAdmin :one
UPDATE users
SET is_superuser = NOT is_superuser
WHERE id = ?
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at
`

func (q *Queries) ToggleAdmin(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, toggleAdmin, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET vacation_days = ?,
username = ?,
email = ?,
edited_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at
`

type UpdateUserParams struct {
	VacationDays int64  `json:"vacation_days"`
	Username     string `json:"username"`
	Email        string `json:"email"`
	ID           int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.VacationDays,
		arg.Username,
		arg.Email,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const updateVacationDays = `-- name: UpdateVacationDays :one
UPDATE users
SET vacation_days = ?,
edited_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at
`

type UpdateVacationDaysParams struct {
	VacationDays int64 `json:"vacation_days"`
	ID           int64 `json:"id"`
}

func (q *Queries) UpdateVacationDays(ctx context.Context, arg UpdateVacationDaysParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateVacationDays, arg.VacationDays, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}
