// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package repo

import (
	"context"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (username, color, vacation_days, email, password, is_superuser)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color, role, enabled
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Color        string `json:"color"`
	VacationDays int64  `json:"vacation_days"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	IsSuperuser  bool   `json:"is_superuser"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, CreateUser,
		arg.Username,
		arg.Color,
		arg.VacationDays,
		arg.Email,
		arg.Password,
		arg.IsSuperuser,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
		&i.Role,
		&i.Enabled,
	)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, DeleteUser, id)
	return err
}

const GetAdmins = `-- name: GetAdmins :many
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color, role, enabled FROM users
WHERE is_superuser = true
`

func (q *Queries) GetAdmins(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, GetAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.VacationDays,
			&i.IsSuperuser,
			&i.CreatedAt,
			&i.EditedAt,
			&i.Color,
			&i.Role,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color, role, enabled FROM users
WHERE id != 1
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, GetAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.VacationDays,
			&i.IsSuperuser,
			&i.CreatedAt,
			&i.EditedAt,
			&i.Color,
			&i.Role,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color, role, enabled FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
		&i.Role,
		&i.Enabled,
	)
	return i, err
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color, role, enabled FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
		&i.Role,
		&i.Enabled,
	)
	return i, err
}

const GetUserByName = `-- name: GetUserByName :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color, role, enabled FROM users
WHERE username = ?
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
		&i.Role,
		&i.Enabled,
	)
	return i, err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET color = ?,
username = ?,
email = ?,
password = ?,
vacation_days = ?,
is_superuser = ?,
edited_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color, role, enabled
`

type UpdateUserParams struct {
	Color        string `json:"color"`
	Username     string `json:"username"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	VacationDays int64  `json:"vacation_days"`
	IsSuperuser  bool   `json:"is_superuser"`
	ID           int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, UpdateUser,
		arg.Color,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.VacationDays,
		arg.IsSuperuser,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
		&i.Role,
		&i.Enabled,
	)
	return i, err
}
