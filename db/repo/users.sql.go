// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package repo

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, color, vacation_days, email, password, is_superuser)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Color        string `json:"color"`
	VacationDays int64  `json:"vacation_days"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	IsSuperuser  bool   `json:"is_superuser"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Color,
		arg.VacationDays,
		arg.Email,
		arg.Password,
		arg.IsSuperuser,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAdmins = `-- name: GetAdmins :many
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color FROM users
WHERE is_superuser = true
`

func (q *Queries) GetAdmins(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.VacationDays,
			&i.IsSuperuser,
			&i.CreatedAt,
			&i.EditedAt,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color FROM users
WHERE id != 1
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.VacationDays,
			&i.IsSuperuser,
			&i.CreatedAt,
			&i.EditedAt,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color FROM users
WHERE username = ?
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
	)
	return i, err
}

const getUsersWithVacationCount = `-- name: GetUsersWithVacationCount :many
SELECT
    u.id, u.username, u.email, u.password, u.vacation_days, u.is_superuser, u.created_at, u.edited_at, u.color,
    COALESCE(SUM(vt.value), 0.0) AS vac_remaining,
    COALESCE(SUM(0.5), 0.0) AS vac_used
FROM users AS u
LEFT JOIN vacation_tokens vt 
    ON u.id = vt.user_id
    AND vt.start_date <= ?
    AND vt.end_date   >= ?
GROUP BY u.id
ORDER BY u.id
`

type GetUsersWithVacationCountParams struct {
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

type GetUsersWithVacationCountRow struct {
	ID           int64       `json:"id"`
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	Password     string      `json:"password"`
	VacationDays int64       `json:"vacation_days"`
	IsSuperuser  bool        `json:"is_superuser"`
	CreatedAt    time.Time   `json:"created_at"`
	EditedAt     time.Time   `json:"edited_at"`
	Color        string      `json:"color"`
	VacRemaining interface{} `json:"vac_remaining"`
	VacUsed      interface{} `json:"vac_used"`
}

func (q *Queries) GetUsersWithVacationCount(ctx context.Context, arg GetUsersWithVacationCountParams) ([]GetUsersWithVacationCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersWithVacationCount, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithVacationCountRow
	for rows.Next() {
		var i GetUsersWithVacationCountRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.VacationDays,
			&i.IsSuperuser,
			&i.CreatedAt,
			&i.EditedAt,
			&i.Color,
			&i.VacRemaining,
			&i.VacUsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserColor = `-- name: SetUserColor :exec
UPDATE users
SET color = ?
WHERE id = ?
`

type SetUserColorParams struct {
	Color string `json:"color"`
	ID    int64  `json:"id"`
}

func (q *Queries) SetUserColor(ctx context.Context, arg SetUserColorParams) error {
	_, err := q.db.ExecContext(ctx, setUserColor, arg.Color, arg.ID)
	return err
}

const setUserVacation = `-- name: SetUserVacation :one
UPDATE users
SET vacation_days = ?
WHERE id = ?
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color
`

type SetUserVacationParams struct {
	VacationDays int64 `json:"vacation_days"`
	ID           int64 `json:"id"`
}

func (q *Queries) SetUserVacation(ctx context.Context, arg SetUserVacationParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserVacation, arg.VacationDays, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
	)
	return i, err
}

const toggleAdmin = `-- name: ToggleAdmin :one
UPDATE users
SET is_superuser = NOT is_superuser
WHERE id = ?
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color
`

func (q *Queries) ToggleAdmin(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, toggleAdmin, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET color = ?,
username = ?,
email = ?,
edited_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color
`

type UpdateUserParams struct {
	Color    string `json:"color"`
	Username string `json:"username"`
	Email    string `json:"email"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Color,
		arg.Username,
		arg.Email,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
	)
	return i, err
}

const updateVacationDays = `-- name: UpdateVacationDays :one
UPDATE users
SET vacation_days = ?,
edited_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at, color
`

type UpdateVacationDaysParams struct {
	VacationDays int64 `json:"vacation_days"`
	ID           int64 `json:"id"`
}

func (q *Queries) UpdateVacationDays(ctx context.Context, arg UpdateVacationDaysParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateVacationDays, arg.VacationDays, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Color,
	)
	return i, err
}
