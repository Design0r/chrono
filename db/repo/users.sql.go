// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repo

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, vacation_days, email, password, is_superuser)
VALUES (?, ?, ?, ?, ?)
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at
`

type CreateUserParams struct {
	Username     string `json:"username"`
	VacationDays int64  `json:"vacation_days"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	IsSuperuser  bool   `json:"is_superuser"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.VacationDays,
		arg.Email,
		arg.Password,
		arg.IsSuperuser,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, email, password, vacation_days, is_superuser, created_at, edited_at FROM users
WHERE username = ?
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const updateVacationDays = `-- name: UpdateVacationDays :one
UPDATE users
SET vacation_days = ?
WHERE id = ?
RETURNING id, username, email, password, vacation_days, is_superuser, created_at, edited_at
`

type UpdateVacationDaysParams struct {
	VacationDays int64 `json:"vacation_days"`
	ID           int64 `json:"id"`
}

func (q *Queries) UpdateVacationDays(ctx context.Context, arg UpdateVacationDaysParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateVacationDays, arg.VacationDays, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.VacationDays,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}
