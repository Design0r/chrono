// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: vacation_tokens.sql

package repo

import (
	"context"
	"time"
)

const CreateVacationToken = `-- name: CreateVacationToken :one
INSERT INTO vacation_tokens (user_id, start_date, end_date, value)
VALUES (?,?,?,?)
RETURNING id, start_date, end_date, value, user_id
`

type CreateVacationTokenParams struct {
	UserID    int64     `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Value     float64   `json:"value"`
}

func (q *Queries) CreateVacationToken(ctx context.Context, arg CreateVacationTokenParams) (VacationToken, error) {
	row := q.db.QueryRowContext(ctx, CreateVacationToken,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Value,
	)
	var i VacationToken
	err := row.Scan(
		&i.ID,
		&i.StartDate,
		&i.EndDate,
		&i.Value,
		&i.UserID,
	)
	return i, err
}

const DeleteAllVacationTokens = `-- name: DeleteAllVacationTokens :exec
DELETE FROM vacation_tokens
`

func (q *Queries) DeleteAllVacationTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, DeleteAllVacationTokens)
	return err
}

const DeleteVacationToken = `-- name: DeleteVacationToken :exec
DELETE FROM vacation_tokens
WHERE id = ?
`

func (q *Queries) DeleteVacationToken(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, DeleteVacationToken, id)
	return err
}

const GetRemainingVacationForUser = `-- name: GetRemainingVacationForUser :one
SELECT SUM(value) FROM vacation_tokens
WHERE user_id = ? 
AND start_date <= ?
AND end_date >= ?
`

type GetRemainingVacationForUserParams struct {
	UserID    int64     `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) GetRemainingVacationForUser(ctx context.Context, arg GetRemainingVacationForUserParams) (*float64, error) {
	row := q.db.QueryRowContext(ctx, GetRemainingVacationForUser, arg.UserID, arg.StartDate, arg.EndDate)
	var sum *float64
	err := row.Scan(&sum)
	return sum, err
}
