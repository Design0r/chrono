// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: vacation_tokens.sql

package repo

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO vacation_tokens (user_id, start_date, end_date, value)
VALUES (?,?,?,?)
RETURNING id, start_date, end_date, value, user_id
`

type CreateTokenParams struct {
	UserID    int64     `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Value     float64   `json:"value"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (VacationToken, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Value,
	)
	var i VacationToken
	err := row.Scan(
		&i.ID,
		&i.StartDate,
		&i.EndDate,
		&i.Value,
		&i.UserID,
	)
	return i, err
}

const debugResetTokens = `-- name: DebugResetTokens :exec
DELETE FROM vacation_tokens
`

func (q *Queries) DebugResetTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, debugResetTokens)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM vacation_tokens
WHERE id = ?
`

func (q *Queries) DeleteToken(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const getValidUserTokenSum = `-- name: GetValidUserTokenSum :one
SELECT SUM(value) FROM vacation_tokens
WHERE user_id = ? 
AND start_date <= ?
AND end_date >= ?
`

type GetValidUserTokenSumParams struct {
	UserID    int64     `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) GetValidUserTokenSum(ctx context.Context, arg GetValidUserTokenSumParams) (*float64, error) {
	row := q.db.QueryRowContext(ctx, getValidUserTokenSum, arg.UserID, arg.StartDate, arg.EndDate)
	var sum *float64
	err := row.Scan(&sum)
	return sum, err
}

const getValidUserTokens = `-- name: GetValidUserTokens :many
SELECT id, start_date, end_date, value, user_id from vacation_tokens
WHERE user_id = ? 
AND ? >= start_date
AND ? <= end_date
`

type GetValidUserTokensParams struct {
	UserID    int64     `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) GetValidUserTokens(ctx context.Context, arg GetValidUserTokensParams) ([]VacationToken, error) {
	rows, err := q.db.QueryContext(ctx, getValidUserTokens, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VacationToken
	for rows.Next() {
		var i VacationToken
		if err := rows.Scan(
			&i.ID,
			&i.StartDate,
			&i.EndDate,
			&i.Value,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateYearlyTokens = `-- name: UpdateYearlyTokens :exec
UPDATE vacation_tokens
SET value = ?
WHERE user_id = ? 
AND start_date <= ?
AND end_date >= ?
`

type UpdateYearlyTokensParams struct {
	Value     float64   `json:"value"`
	UserID    int64     `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) UpdateYearlyTokens(ctx context.Context, arg UpdateYearlyTokensParams) error {
	_, err := q.db.ExecContext(ctx, updateYearlyTokens,
		arg.Value,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}
